# -*- coding: utf-8 -*-
"""CryptoToolkit.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iW7atnKlu4xCP0RNAhAXwsEaQVHjIT51
"""

import os
import hashlib
import time

# Function to calculate the SHA-256 hash of a file
def calculate_sha256_hash(file_path):
    sha256_hash = hashlib.sha256()

    with open(file_path, "rb") as file:
        while True:
            data = file.read(65536)  # Read the file in chunks of 64 KB
            if not data:
                break
            sha256_hash.update(data)

    return sha256_hash.hexdigest()

# Function to measure the time taken to calculate hashes for a file
def measure_hashes_per_second(file_path):
    start_time = time.time()

    for _ in range(1000):  # Perform 1000 hash calculations to get an average time
        calculate_sha256_hash(file_path)

    end_time = time.time()
    elapsed_time = end_time - start_time
    hashes_per_second = 1000 / elapsed_time
    return hashes_per_second

# Function to find a collision through brute-force
def find_collision(target_hash):
    current_hash = ""
    counter = 0

    while not current_hash.startswith(target_hash):
        data = str(counter).encode('utf-8')
        current_hash = hashlib.sha256(data).hexdigest()
        counter += 1

    return current_hash, counter

# Function to generate a vanity bitcoin address
def generate_vanity_address(target_hex_digits):
    current_hash = ""
    counter = 0

    while not current_hash.startswith(target_hex_digits):
        data = str(counter).encode('utf-8')
        current_hash = hashlib.sha256(data).hexdigest()
        counter += 1

    return current_hash, counter

if __name__ == "__main__":
    # Task 1: Generating and Hashing Files

    # Generate a very short file (less than 256 bits)
    short_file_path = "short_file.txt"
    with open(short_file_path, "wb") as f:
        f.write(os.urandom(16))  # 16 bytes = 128 bits

    # Generate a 1 Kbyte file
    large_file_path = "large_file.txt"
    with open(large_file_path, "wb") as f:
        f.write(os.urandom(1024))  # 1024 bytes = 8192 bits

    # Calculate hashes per second for the short file
    short_file_hashes_per_second = measure_hashes_per_second(short_file_path)
    print(f"Hashes per second for the short file: {short_file_hashes_per_second:.2f}")

    # Calculate hashes per second for the large file
    large_file_hashes_per_second = measure_hashes_per_second(large_file_path)
    print(f"Hashes per second for the large file: {large_file_hashes_per_second:.2f}")

    # Task 1: Calculate Brute-Force Collision Time

    # Example: Find a collision for a specific target hash (first four digits as "0000")
    target_hash = "0000"
    collision_hash, collision_count = find_collision(target_hash)

    print(f"Target hash: {target_hash}")
    print(f"Collision found: {collision_hash}")
    print(f"Time taken to find the collision: {collision_count} attempts")

    # Task 2: Vanity Bitcoin Address Generation

    # Example: Find a hash with the first four hex digits as "0223" (for birthdate 02231947)
    target_hex_digits = "0223"
    vanity_hash, vanity_count = generate_vanity_address(target_hex_digits)

    print(f"Target hex digits: {target_hex_digits}")
    print(f"Vanity hash found: {vanity_hash}")
    print(f"Time taken to find the vanity hash: {vanity_count} attempts")